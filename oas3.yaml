
openapi: 3.0.3
info:
  title: API MarkeTrento
  version: "1.0"
servers:
  - url: https://api.server.test/v1
  - url: https://markeTrento.onrender.com
    description: render.com
paths:
  /:
    get:
      summary: Default page
      description: Returns the default page of the API.
      responses:
        "200":
          description: Home page
          content:
            html:
              schema:
                type: string
  /mercato:
    get:
      summary: Market page
      description: Returns the market page of the API.
      responses:
        "200":
          description: Market page
          content:
            html:
              schema:
                type: string
  /login:
    post:
      requestBody:
        $ref: "#/components/requestBodies/Login"
      responses:
        "200":
          description: Login successful
          content:
            html:
              schema:
                type: string
        "401":
          description: Unauthorized
          content:
            html:
              schema:
                type: string
  /loginbusiness:
    post:
      requestBody:
        $ref: "#/components/requestBodies/LoginBusiness"
      responses:
        "200":
          description: Login successful
          content:
            html:
              schema:
                type: string
        "401":
          description: Unauthorized
          content:
            html:
              schema:
                type: string
  /loginadmin:
    post:
      requestBody:
        $ref: "#/components/requestBodies/LoginAdmin"
      responses:
        "200":
          description: Login successful
          content:
            html:
              schema:
                type: string
        "401":
          description: Unauthorized
          content:
            html:
              schema:
                type: string
  /api/v1/prodotti:
    post:
      requestBody:
        $ref: "#/components/requestBodies/ReqProduct"
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
  /api/v1/prodotti/{id}:
    get:
      description: Ottieni prodotto corrispondente all'id
      summary: Ottieni prodotto corrispondente all'id
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID del prodotto
      responses:
        "200":
          description: A JSON with one product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: prodotto non trovato
        "500":
          description: Internal Server Error
    put:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID del prodotto
      requestBody:
        $ref: "#/components/requestBodies/ReqProduct"
      responses:
        "200":
          description: Prodotto aggiornato
        "500":
          description: Internal Server Error
    delete:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID del prodotto
      requestBody:
        $ref: "#/components/requestBodies/ReqProduct"
      responses:
        "200":
          description: Prodotto eliminato
        "500":
          description: Internal Server Error
  /api/v1/prodotti/{id}/foto:
    post:
      description: Aggiungi un immagine al prodotto
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID del prodotto
      requestBody:
        $ref: "#/components/requestBodies/ImageReq"
      responses:
        "200":
          description: Foto del prodotto aggiornata con successo
        "500":
          description: Errore del server
    get:
      description: Ottieni immagine associata al prodotto
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID del prodotto
      responses:
        "200":
          description: Ottieni immagine associata al prodotto
          content:
            binary:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    description: binary
        "404":
          description: Foto non trovata
        "500":
          description: Errore del server
  /api/v1/venditori:
    get:
      summary: Retrieve a vendor account by email
      description: Retrieve a vendor account by email.
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: Email utente
      responses:
        "200":
          description: Venditore trovato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Venditore"
        "404":
          description: Venditore non trovato
        "500":
          description: Errore del server
  /api/v1/venditori/{id}:
    get:
      description: Ottieni venditore associato all'ID
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID del venditore
      responses:
        "200":
          description: A JSON with one seller
          content:
            application/json:
              schema: null
              $ref: "#/components/schemas/Venditore"
        "404":
          description: Venditore non trovato
        "500":
          description: Internal Server Error
  /api/v1/venditori/{id}/descrizione:
    put:
      description: Modifica descrizione del venditore
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID del venditore
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      requestBody:
        $ref: "#/components/requestBodies/DescrizioneUpdate"
      responses:
        "200":
          description: Venditore aggiornato
        "500":
          description: Internal Server Error
  /api/v1/venditori/{id}/sede:
    put:
      description: Update venditori sede
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID del venditore
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      requestBody:
        $ref: "#/components/requestBodies/SedeUpdate"
      responses:
        "200":
          description: Sede aggiornata
        "500":
          description: Internal Server Error
  /api/v1/venditori/registrazione:
    post:
      requestBody:
        $ref: "#/components/requestBodies/VenditoreReq"
      responses:
        "201":
          description: Venditore creato
        "500":
          description: Errore del server
  /api/v1/tags:
    get:
      responses:
        "200":
          description: A JSON array of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    nome:
                      type: string
        "500":
          description: Internal Server Error
  /api/v1/venditori/{id}/orders:
    get:
      summary: Ottieni gli ordini di un venditore
      description: Restituisce gli ordini associati a un venditore, esclusi quelli
        rifiutati e quelli consegnati/ritirati da pi√π di 21 giorni.
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID del venditore
      responses:
        "200":
          description: Lista degli ordini del venditore
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "500":
          description: Errore nel recupero degli ordini per il venditore
  /api/v1/venditori/{venditoreId}/recensioni:
    get:
      description: Ottieni le recensioni per un venditore
      parameters:
        - in: path
          required: true
          name: venditoreId
          schema:
            type: string
          description: ID del venditore
      responses:
        "200":
          description: Ottieni recensioni associate al venditore
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recensione"
        "500":
          description: Errore del server
  /api/v1/venditori/{id}/prodotti:
    get:
      description: Ottieni i prodotti del venditore associato all'ID
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID del venditore
      responses:
        "200":
          description: A JSON array of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "404":
          description: Prodotto non trovato
        "500":
          description: Internal Server Error
  /api/v1/venditori/{id}/carrello/add:
    post:
      summary: Aggiungi un prodotto al carrello
      description: Aggiunge un prodotto al carrello del venditore
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID dell'utente
      requestBody:
        $ref: "#/components/requestBodies/ProdottoCarrello"
      responses:
        "200":
          description: Prodotto aggiunto al carrello
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Errore di validazione (es. prodotti di venditori diversi)
        "404":
          description: Utente o prodotto non trovato
        "500":
          description: Errore del server
  /api/v1/venditori/{id}/carrello:
    get:
      summary: Ottieni il carrello dell'utente venditore
      description: Restituisce i prodotti presenti nel carrello di un venditore
      parameters:
        - in: path
          description: ID dell'utente
          required: true
          name: id
          schema:
            type: string
      responses:
        "200":
          description: Lista dei prodotti nel carrello
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "404":
          description: Carrello non trovato
        "500":
          description: Errore del server
  /api/v1/venditori/{id}/carrello/removeOne:
    post:
      summary: Rimuovi una quantit√† di un prodotto dal carrello
      description: Rimuove una quantit√† di un prodotto dal carrello del venditore
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID dell'utente
      requestBody:
        $ref: "#/components/requestBodies/ReqProduct"
      responses:
        "200":
          description: Prodotto aggiornato
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Utente non trovato
        "500":
          description: Errore del server
  /api/v1/venditori/{id}/carrello/clear:
    post:
      summary: Svuota il carrello del venditore
      description: Svuota completamente il carrello del venditore.
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID dell'utente
      responses:
        "200":
          description: Carrello svuotato
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Utente non trovato
        "500":
          description: Errore durante lo svuotamento del carrello
  /api/v1/citytags:
    get:
      responses:
        "200":
          description: A JSON array of city tags
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    tag:
                      type: string
        "500":
          description: Internal Server Error
  /api/v1/clienti/{id}:
    get:
      summary: Ottieni un cliente
      description: Ottieni il cliente corrispondente all'id
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID del cliente
      responses:
        "200":
          description: Cliente trovato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cliente"
        "404":
          description: Cliente non trovato
        "500":
          description: Errore del server
    delete:
      summary: Cancella un cliente
      description: Cancella il cliente corrispondente all'id
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID del cliente
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "200":
          description: Cliente eliminato con successo
        "404":
          description: Cliente non trovato
        "500":
          description: Errore del server
  /api/v1/clienti:
    get:
      summary: Retrieve a user account by email
      description: Retrieve a user account (Cliente, Imprenditore, Venditore, Admin)
        by email.
      parameters:
        parameters:
          - in: query
            name: email
            schema:
              type: string
            description: Email utente
      responses:
        "200":
          description: Cliente trovato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cliente"
        "404":
          description: Cliente non trovato
        "500":
          description: Errore del server
  /api/v1/clienti/{id}/carrello:
    get:
      summary: Ottieni il carrello dell'utente
      description: Restituisce i prodotti presenti nel carrello di un utente
      parameters:
        - in: path
          description: ID dell'utente
          required: true
          name: id
          schema:
            type: string
      responses:
        "200":
          description: Lista dei prodotti nel carrello
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "404":
          description: Carrello non trovato
        "500":
          description: Errore del server
  
  
  /api/v1/clienti/{id}/carrello/add:
    post:
      summary: Aggiungi un prodotto al carrello
      description: Aggiunge un prodotto al carrello del cliente
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID dell'utente
      requestBody:
        $ref: "#/components/requestBodies/ProdottoCarrello"
      responses:
        "200":
          description: Prodotto aggiunto al carrello
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Errore di validazione (es. prodotti di venditori diversi)
        "404":
          description: Utente o prodotto non trovato
        "500":
          description: Errore del server
  
 
  /api/v1/clienti/{id}/carrello/removeOne:
    post:
      summary: Rimuovi una quantit√† di un prodotto dal carrello
      description: Rimuove una quantit√† di un prodotto dal carrello del cliente
      parameters:
        - in: path
          required: true
          name: userId
          schema:
            type: string
          description: ID dell'utente
      requestBody:
        $ref: "#/components/requestBodies/ProdottoRemove"
      responses:
        "200":
          description: Prodotto aggiornato
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Utente non trovato
        "500":
          description: Errore del server
  /api/v1/clienti/{id}/carrello/clear:
    post:
      summary: Svuota il carrello del cliente
      description: Svuota completamente il carrello del cliente.
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID dell'utente
      responses:
        "200":
          description: Carrello svuotato
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Utente non trovato
        "500":
          description: Errore durante lo svuotamento del carrello
  /api/v1/accounts/password:
    put:
      summary: Update user password
      description: Update the password of a user account (Cliente, Imprenditore,
        Venditore, Admin).
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      requestBody:
        $ref: "#/components/requestBodies/PasswordReq"
      responses:
        "200":
          description: Password aggiornata con successo
        "400":
          description: Richiesta non valida
        "401":
          description: Vecchia password errata
        "404":
          description: Utente non trovato
        "500":
          description: Errore del server
  /api/v1/accounts/registrazione:
    post:
      summary: Register a new user account
      description: Register a new user account (Cliente) with the provided details.
      requestBody:
        $ref: "#/components/requestBodies/RegistrazioneReq"
      responses:
        "201":
          description: Registrazione avvenuta con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "400":
          description: Richiesta non valida, campi mancanti
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
        "500":
          description: Errore del server
  
  /api/v1/consegne:
    get:
      summary: Ottieni tutte le consegne
      description: Restituisce tutte le consegne, ordinate per data di pubblicazione
        decrescente.
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "200":
          description: Lista delle consegne
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Consegna"
        "500":
          description: Errore nel recupero delle consegne
    post:
      summary: Crea una nuova consegna
      description: Crea una nuova consegna con status "In consegna".
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      requestBody:
        $ref: "#/components/requestBodies/DateReq"
      responses:
        "201":
          description: Consegna creata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  consegna:
                    $ref: "#/components/schemas/Consegna"
        "400":
          description: Dati di consegna mancanti
        "500":
          description: Errore durante la creazione della consegna
  /api/v1/consegne/inConsegna:
    get:
      summary: Ottieni la consegna pi√π recente "In consegna"
      description: Restituisce la consegna pi√π recente con status "In consegna".
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "200":
          description: Consegna trovata o null se nessuna trovata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Consegna"
        "500":
          description: Errore nel recupero delle consegne
  /api/v1/consegne/{id}:
    get:
      summary: Ottieni una consegna per ID
      description: Restituisce una consegna dato il suo ID.
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID della consegna
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "200":
          description: Consegna trovata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Consegna"
        "404":
          description: Consegna non trovata
        "500":
          description: Errore nel recupero delle consegne
    put:
      summary: Aggiungi un ordine a una consegna
      description: Aggiunge un ordine (id) all'array ordini della consegna.
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID della consegna
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      requestBody:
        $ref: "#/components/requestBodies/OrdineIdReq"
      responses:
        "200":
          description: Ordine aggiunto alla consegna
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  consegna:
                    $ref: "#/components/schemas/Consegna"
        "400":
          description: ID ordine mancante
        "404":
          description: Consegna non trovata
        "500":
          description: Errore durante l'aggiornamento della consegna
  /api/v1/consegne/{id}/svuota:
    put:
      summary: Svuota gli ordini di una consegna
      description: Svuota l'array degli ordini di una consegna e aggiorna la data.
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID della consegna
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      requestBody:
        $ref: "#/components/requestBodies/DateReq"  #false
      responses:
        "200":
          description: Consegna svuotata con successo
        "404":
          description: Consegna non trovata
        "500":
          description: Errore durante l'aggiornamento della consegna
  /api/v1/consegne/{id}/approva:
    put:
      summary: Approva una consegna
      description: Imposta lo status della consegna a "Consegnata".
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID della consegna
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "200":
          description: Consegna approvata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  consegna:
                    $ref: "#/components/schemas/Consegna"
        "404":
          description: Consegna non trovata
        "500":
          description: Errore durante l'approvazione della consegna
  /api/v1/orders:
    get:
      summary: Ottieni tutti gli ordini
      description: Restituisce tutti gli ordini, con possibilit√† di filtrare per tipo
        utente e ID.
      parameters:
        - in: query
          name: userType
          schema:
            type: string
            enum:
              - cliente
              - venditore
              - imprenditore
          description: Tipo di utente per filtrare gli ordini
        - in: query
          name: userId
          schema:
            type: string
          description: ID dell'utente per filtrare gli ordini
      responses:
        "200":
          description: Lista degli ordini
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "500":
          description: Errore nel recupero degli ordini
    post:
      summary: Crea un nuovo ordine
      description: Crea un nuovo ordine e aggiorna la quantit√† dei prodotti.
      requestBody:
        $ref: "#/components/requestBodies/OrderReq"
      responses:
        "201":
          description: Ordine creato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Quantit√† insufficiente per uno o pi√π prodotti
        "500":
          description: Errore durante il salvataggio dell'ordine
  /api/v1/orders/{id}:
    get:
      summary: Ottieni un ordine per ID
      description: Restituisce un ordine dato il suo ID.
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID dell'ordine
      responses:
        "200":
          description: Ordine trovato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Ordine non trovato
        "500":
          description: Errore nel recupero dell'ordine
  /api/v1/orders/{id}/approve:
    post:
      summary: Approva un ordine
      description: Imposta lo stato dell'ordine a "In consegna".
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID dell'ordine
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "200":
          description: Ordine approvato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Ordine non trovato
        "500":
          description: Errore durante l'approvazione dell'ordine
  /api/v1/orders/{id}/rifiuta:
    post:
      summary: Rifiuta un ordine
      description: Imposta lo stato dell'ordine a "Rifiutato".
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID dell'ordine
      responses:
        "200":
          description: Ordine rifiutato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Ordine non trovato
        "500":
          description: Errore durante il rifiuto dell'ordine
  /api/v1/orders/{id}/ritirato:
    put:
      summary: Marca un ordine come ritirato
      description: Imposta lo stato dell'ordine a "Ritirato".
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID dell'ordine
      responses:
        "200":
          description: Ordine marcato come ritirato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Ordine non trovato
        "500":
          description: Errore durante la marcatura dell'ordine come ritirato
  /api/v1/admin/{id}:
    get:
      summary: Ottieni un admin
      description: Ottieni Admin corrispondente all'id
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID dell'admin
      responses:
        "200":
          description: Admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
        "404":
          description: Admin non trovato
        "500":
          description: Errore del server
  /api/v1/admin:
    post:
      summary: Crea Admin
      description: Crea Admin
      requestBody:
        $ref: "#/components/requestBodies/AdminReq"
      responses:
        "201":
          description: Admin creato con successo
        "400":
          description: Admin gi√† esistente con questa email
        "500":
          description: Errore interno del server
    get:
      summary: Retrieve an admin account by email
      description: Retrieve an admin account by email.
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: Email utente
      responses:
        "200":
          description: Admin trovato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
        "404":
          description: Admin non trovato
        "500":
          description: Errore del server
  /api/v1/upgrades/registrazione:
    post:
      summary: Carica una richiesta di upgrade con PDF
      description: Permette a un imprenditore di caricare una richiesta di upgrade
        allegando un file PDF.
      requestBody:
        $ref: "#/components/requestBodies/UpgradeReq"
      responses:
        "201":
          description: File caricato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: string
        "400":
          description: Nessun file PDF caricato
        "500":
          description: Errore durante il caricamento del file
  /api/v1/upgrades:
    get:
      summary: Ottieni tutte le richieste di upgrade
      description: Restituisce tutte le richieste di upgrade caricate.
      responses:
        "200":
          description: Lista delle richieste di upgrade
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Upgrade"
        "404":
          description: Nessun file trovato
        "500":
          description: Errore interno del server
  /api/v1/upgrades/{id}/file:
    get:
      summary: Scarica il file PDF di una richiesta di upgrade
      description: Restituisce il file PDF associato a una richiesta di upgrade.
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID dell'upgrade
      responses:
        "200":
          description: File PDF restituito
          content:
            application/pdf:
              schema:
                $ref: "#/components/schemas/PDF"
        "404":
          description: File non trovato
        "500":
          description: Errore durante il recupero del file
  /api/v1/upgrades/{id}/registrazione:
    get:
      summary: Scarica il file PDF come attachment
      description: Restituisce il file PDF come allegato per il download.
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID dell'upgrade
      responses:
        "200":
          description: File PDF restituito come attachment
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        "404":
          description: File non trovato
        "500":
          description: Errore durante il recupero del file
  /api/v1/upgrades/{id}:
    delete:
      summary: Elimina una richiesta di upgrade
      description: Elimina una richiesta di upgrade dal database.
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID dell'upgrade
      responses:
        "200":
          description: File eliminato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: File non trovato
        "500":
          description: Errore durante l'eliminazione del file
  /api/v1/imprenditori:
    get:
      summary: Retrieve an entrepreneur account by email
      description: Retrieve an entrepreneur account by email.
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: Email utente
      responses:
        "200":
          description: Imprenditore trovato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Imprenditore"
        "404":
          description: Imprenditore non trovato
        "500":
          description: Errore del server
  /api/v1/imprenditori/{id}/descrizione:
    put:
      summary: Aggiorna la descrizione di un imprenditore
      description: Aggiorna la descrizione di un imprenditore dato il suo ID.
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID dell'imprenditore
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      requestBody:
        $ref: "#/components/requestBodies/DescrizioneUpdate"
      responses:
        "200":
          description: Descrizione aggiornata con successo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Imprenditore"
        "500":
          description: Errore del server
  /api/v1/imprenditori/{id}/sede:
    put:
      summary: Aggiorna la sede di un imprenditore
      description: Aggiorna la sede di un imprenditore dato il suo ID.
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID dell'imprenditore
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      requestBody:
        $ref: "#/components/requestBodies/SedeUpdate"
      responses:
        "200":
          description: Sede aggiornata con successo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Imprenditore"
        "500":
          description: Errore del server
  /api/v1/imprenditori/add:
    post:
      summary: Crea un nuovo imprenditore
      description: Crea un nuovo imprenditore.
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      requestBody:
        $ref: "#/components/requestBodies/ImprenditoreReq"
      responses:
        "201":
          description: Imprenditore creato con successo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Imprenditore"
        "500":
          description: Errore del server
  /api/v1/imprenditori/{id}:
    get:
      summary: Ottieni un imprenditore per ID
      description: Restituisce un imprenditore dato il suo ID.
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID dell'imprenditore
      responses:
        "200":
          description: Imprenditore trovato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Imprenditore"
        "404":
          description: Imprenditore non trovato
        "500":
          description: Errore del server
    delete:
      summary: Elimina un imprenditore
      description: Elimina un imprenditore dato il suo ID.
      responses:
        "200":
          description: Imprenditore eliminato con successo
        "404":
          description: Imprenditore non trovato
        "500":
          description: Errore del server
  /api/v1/imprenditori/{id}/carrello:
    get:
      summary: Ottieni il carrello dell'utente imprenditore
      description: Restituisce i prodotti presenti nel carrello di un imprenditore
      parameters:
        - in: path
          description: ID dell'utente
          required: true
          name: id
          schema:
            type: string
      responses:
        "200":
          description: Lista dei prodotti nel carrello
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "404":
          description: Carrello non trovato
        "500":
          description: Errore del server
  /api/v1/imprenditori/{id}/carrello/add:
    post:
      summary: Aggiungi un prodotto al carrello
      description: Aggiunge un prodotto al carrello dell'imprenditore
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID dell'utente
      requestBody:
        $ref: "#/components/requestBodies/ProdottoCarrello"
      responses:
        "200":
          description: Prodotto aggiunto al carrello
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Errore di validazione (es. prodotti di venditori diversi)
        "404":
          description: Utente o prodotto non trovato
        "500":
          description: Errore del server
  /api/v1/imprenditori/{id}/carrello/removeOne:
    post:
      summary: Rimuovi una quantit√† di un prodotto dal carrello
      description: Rimuove una quantit√† di un prodotto dal carrello dell'imprenditore
      parameters:
        - in: path
          required: true
          name: userId
          schema:
            type: string
          description: ID dell'utente
      requestBody:
        $ref: "#/components/requestBodies/ProdottoRemove"
      responses:
        "200":
          description: Prodotto aggiornato
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Utente non trovato
        "500":
          description: Errore del server
  /api/v1/imprenditori/{id}/carrello/clear:
    post:
      summary: Svuota il carrello dell'imprenditore
      description: Svuota completamente il carrello dell'imprenditore.
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
          description: ID dell'utente
      responses:
        "200":
          description: Carrello svuotato
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Utente non trovato
        "500":
          description: Errore durante lo svuotamento del carrello
  /api/v1/recensioni:
    post:
      description: Aggiungi Recensione
      requestBody:
        $ref: "#/components/requestBodies/RecensioneReq"
      responses:
        "201":
          description: Recensione salvata con successo!
        "400":
          description: Errore nell'ordine (campi incompleti / gi√† esistente)
        "404":
          description: Ordine non trovato
        "500":
          description: Errore del server
  /api/v1/promozioni:
    get:
      summary: Crea una nuova promozione
      description: Crea una nuova promozione
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "200":
          description: Ottieni promozioni
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promotion"
        "500":
          description: Internal server error
    post:
      summary: Crea una nuova promozione
      description: Crea una nuova promozione
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "201":
          description: Promozione creata con successo
          content:
            application/formDta:
              schema:
                $ref: "#/components/schemas/Promotion"
        "500":
          description: Errore durante la creazione della promozione
  /api/v1/service/mail:
    post:
      summary: Manda una mail di conferma registrazione
      description: Manda una mail di conferma registrazione
      responses:
        "200":
          description: Email inviata con successo!
        "500":
          description: Errore durante l'invio dell'email
  /api/v1/service/mail/rifiuto-ordini:
    post:
      summary: Manda una mail di rifiuto ordine
      description: Manda una mail di rifiuto ordine
      responses:
        "200":
          description: Email inviata con successo!
        "500":
          description: Errore durante l'invio dell'email di rifiuto
  /authchecks/interfacciavenditore:
    get:
      summary: Interfaccia venditore
      description: Restituisce la pagina HTML dell'interfaccia venditore (solo per
        utenti con ruolo Venditore).
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "200":
          description: Pagina HTML restituita
          content:
            text/html:
              schema:
                type: string
        "401":
          description: Non autorizzato
  /authchecks/carrello:
    get:
      summary: Carrello cliente
      description: Restituisce la pagina HTML del carrello (solo per utenti con ruolo
        Cliente).
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "200":
          description: Pagina HTML restituita
          content:
            text/html:
              schema:
                type: string
        "401":
          description: Non autorizzato
  /authchecks/dettagliaccount:
    get:
      summary: Dettagli account cliente
      description: Restituisce la pagina HTML dei dettagli account (solo per utenti
        con ruolo Cliente).
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "200":
          description: Pagina HTML restituita
          content:
            text/html:
              schema:
                type: string
        "401":
          description: Non autorizzato
  /authchecks/addPromo:
    get:
      summary: Aggiungi promozione (imprenditore)
      description: Restituisce la pagina HTML per aggiungere una promozione (solo per
        utenti con ruolo Imprenditore).
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "200":
          description: Pagina HTML restituita
          content:
            text/html:
              schema:
                type: string
        "401":
          description: Non autorizzato
  /authchecks/ordini:
    get:
      summary: Ordini amministratore
      description: Restituisce la pagina HTML degli ordini (solo per utenti con ruolo
        Admin).
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "200":
          description: Pagina HTML restituita
          content:
            text/html:
              schema:
                type: string
        "401":
          description: Non autorizzato
  /authchecks/admin:
    get:
      summary: Dettagli account amministratore
      description: Restituisce la pagina HTML dei dettagli account (solo per utenti
        con ruolo Admin).
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "200":
          description: Pagina HTML restituita
          content:
            text/html:
              schema:
                type: string
        "401":
          description: Non autorizzato
  /authchecks/upgrade:
    get:
      summary: Registrazione venditore (imprenditore)
      description: Restituisce la pagina HTML per la registrazione venditore (solo per
        utenti con ruolo Imprenditore).
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "200":
          description: Pagina HTML restituita
          content:
            text/html:
              schema:
                type: string
        "401":
          description: Non autorizzato
  /authchecks/upgrade-cliente:
    get:
      summary: Upgrade cliente
      description: Restituisce la pagina HTML per l'upgrade cliente (solo per utenti
        con ruolo Cliente).
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "200":
          description: Pagina HTML restituita
          content:
            text/html:
              schema:
                type: string
        "401":
          description: Non autorizzato
  /authchecks/candidature:
    get:
      summary: Candidature amministratore
      description: Restituisce la pagina HTML delle candidature (solo per utenti con
        ruolo Admin).
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "200":
          description: Pagina HTML restituita
          content:
            text/html:
              schema:
                type: string
        "401":
          description: Non autorizzato
  /authchecks/consegne:
    get:
      summary: Consegne amministratore
      description: Restituisce la pagina HTML delle consegne (solo per utenti con
        ruolo Admin).
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "200":
          description: Pagina HTML restituita
          content:
            text/html:
              schema:
                type: string
        "401":
          description: Non autorizzato
  /authchecks/addConsegna:
    get:
      summary: Aggiungi consegna (admin)
      description: Restituisce la pagina HTML per aggiungere una consegna (solo per
        utenti con ruolo Admin).
      security:
        - TokenQueryAuth: []
          XAccessTokenHeaderAuth: []
      responses:
        "200":
          description: Pagina HTML restituita
          content:
            text/html:
              schema:
                type: string
        "401":
          description: Non autorizzato
components:
  schemas:
    Image:
      type: object
      properties:
        _id:
          type: string
        data:
          type: string
          description: binary
        contentType:
          type: string
    PDF:
      type: object
      properties:
        _id:
          type: string
        data:
          type: string
          description: binary
        contentType:
          type: string
        fileName:
          type: string
    Cliente:
      type: object
      properties:
        _id:
          type: string
        nome:
          type: string
        cognome:
          type: string
        birthdate:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
        carrello:
          type: array
          items:
            $ref: "#/components/schemas/Product"
    Imprenditore:
      type: object
      properties:
        _id:
          type: string
        nome:
          type: string
        cognome:
          type: string
        birthdate:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
        sede:
          type: string
        descrizone:
          type: string
        tipo:
          type: string
        carrello:
          type: array
          items:
            $ref: "#/components/schemas/Product"
    Venditore:
      type: object
      properties:
        _id:
          type: string
        nome:
          type: string
        cognome:
          type: string
        birthdate:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
        sede:
          type: string
        descrizone:
          type: string
        tipo:
          type: string
        datiPagamento:
          type: string
        carrello:
          type: array
          items:
            $ref: "#/components/schemas/Product"
    Admin:
      type: object
      properties:
        _id:
          type: string
        nome:
          type: string
        cognome:
          type: string
        birthdate:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
    Promotion:
      type: object
      properties:
        _id:
          type: string
        data:
          type: string
        titolo:
          type: string
        promotore:
          type: string
        descrizione:
          type: string
        img:
          $ref: "#/components/schemas/Image"
        tipoAnnuncio:
          type: string
    Product:
      type: object
      properties:
        _id:
          type: string
        nome:
          type: string
        descrizione:
          type: string
        venditore:
          type: string
        quantita:
          type: integer
        costo:
          type: integer
        tag:
          type: string
        immagine:
          $ref: "#/components/schemas/Image"
    Order:
      type: object
      properties:
        _id:
          type: string
        prodotti:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              nome:
                type: string
              prezzo:
                type: number
              quantity:
                type: integer
        venditore:
          type: string
        cliente:
          type: string
        clienteModel:
          type: string
        zona:
          type: string
        tipo:
          type: string
        pubblicazione:
          type: string
          description: date-time
        stato:
          type: string
    Consegna:
      type: object
      properties:
        _id:
          type: string
        ordini:
          type: array
          items:
            type: string
          description: array of id of orders
        data:
          type: string
          description: date-time
        status:
          type: string
    Recensione:
      type: object
      properties:
        _id:
          type: string
        titolo:
          type: string
        testo:
          type: string
        stelle:
          type: integer
        data:
          type: string
          description: date-time
        ordine:
          type: object
          description: reference to the order
    Upgrade:
      type: object
      properties:
        _id:
          type: string
        imprenditore:
          type: string
        file:
          $ref: "#/components/schemas/PDF"
        uploadDate:
          type: string
          description: date-time
  securitySchemes:
    XAccessTokenHeaderAuth:
      description: The API authentication. The API key must be passed in the header
        'x-access-token'. The API key must be a valid JWT token.
      type: apiKey
      in: header
      name: x-access-token
    TokenQueryAuth:
      description: The API authentication. The API key must be passed in the query
        string 'token'. The API key must be a valid JWT token.
      type: apiKey
      in: query
      name: token
  requestBodies:
    Login: 
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
    LoginBusiness: 
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                description: email
              password:
                type: string
    LoginAdmin: 
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                description: email
              password:
                type: string
    ReqProduct:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              schema:
                $ref: "#/components/schemas/Product"
    DescrizioneUpdate: 
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              descrizione:
                type: string
    SedeUpdate:  
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              sede:
                type: string
    ProdottoCarrello:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              _id:
                type: string
                description: ID del prodotto
              nome:
                type: string
              prezzo:
                type: number
              quantity:
                type: integer
    ProdottoRemove:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              nome:
                type: string
    PasswordReq: 
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              oldPassword:
                type: string
              newPassword:
                type: string
    RegistrazioneReq: 
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              nome:
                type: string
              cognome:
                type: string
              birthdate:
                type: string
              email:
                type: string
              username:
                type: string
              password:
                type: string
    DateReq:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              date:
                type: string
                format: date
    OrdineIdReq:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
                description: ID dell'ordine da aggiungere
    OrderReq: 
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Order"
    AdminReq: 
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              nome:
                type: string
              cognome:
                type: string
              birthdate:
                type: string
              email:
                type: string
              username:
                type: string
              password:
                type: string
    UpgradeReq:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              imprenditore:
                type: string
                description: ID dell'imprenditore
              uploadDate:
                type: string
                format: date-time
              file:
                $ref: "#/components/schemas/PDF"
    RecensioneReq:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              titolo:
                type: string
              testo:
                type: string
              stelle:
                type: integer
              ordine:
                type: string
    ImageReq:
      required: true
      content:
        application/json:  # Specify media type
          schema: 
            $ref: "#/components/schemas/Image"
    VenditoreReq: 
      required: true
      content:
        application/json:  # Specify media type
          schema: 
            $ref: "#/components/schemas/Venditore"
    ImprenditoreReq:
      required: true
      content:
        application/json:  # Specify media type
          schema: 
            $ref: "#/components/schemas/Imprenditore"